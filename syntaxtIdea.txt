[additional specification]
the program execution starts in the "maiwn" function
expressions can be grouped in parentheses to change their precedence
end of line requires an ;

[Comment]
~nyaa This is a comment


[types]
64 bit signed int: iwnt
32 bit signed float: floawt
8 bit char: chaw
XX bit string: stwing
1 bit boolean: boolean (accepts true, True, 1 || false,False,0)
empty byte: voiwd


[Operators]
[+] : pwus
[-] : minwus
[*] : twimes
[/] : diwide


[instruction]
[paws] : noop instruction
[bonk] : break instruction for loops
[moans(stwing)]  : print to stdout
TODO: stderr


[assignment]
foo:stwing iws 'hewwo';
bar:iwnt iws 5 pwus 10;
foobar:chaw iws awway[5] wif ['h','e','w','w','o'];
nobar:iwnt iws awway[4];  <-- creates [0,0,0,0]
foobruh:chaw iws foobar[3];


[casting]
changing the type of a var
TODOO: change floats
yeet<char>(5);
moans(yeet<stwing>(34 pwus 35));


[conditionals]
[>]  : 1 gweatew twan 0
[<]  : 0 wess twan 1
[==] : 1 eqwall twoo 1
[!=] : 1 not eqwall twoo 0


[If-elif-else statement]
you can string conditions together with "and" (acts like &&) and "or" (acts like ||)

*notices cute eqwall twoo 'yes'* or *notices cute not eqwall twoo 'no'* {
    moans('I wuv u UwU');
} but *notices cute eqwall twoo 'a bit'* {
    moans('I wuv u >w<');
} *is oblivious* 
    moans('I wuv u anyway >w<');
}


[while loop]
can be broken with "bonk"

whiwe *notices True* {
    moans('Hawdew Daddy!');
}

[functions]
nuzzles isHorny(isDaddyHome:boolean, isNotLockedUp:boolean) -> boolean {
    *notices isDaddyHome* and *notices isNotLockedUp*{
        wetuwn True;
    } *is oblivious* {
        wetuwn True;
    }
}

